services:
  elk-setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    user: "0"
    networks:
      - analytics
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        echo "Waiting for Elasticsearch availability";
        until curl -s "http://elasticsearch:9200"; do sleep 1; done;
        echo "Setting kibana_system password";
        until curl -s -X POST -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" http://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 1; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    restart: unless-stopped
    environment:
      - node.name=elasticsearch
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: ${ES_MEM_LIMIT}
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - analytics
    labels:
      - "traefik.http.routers.elastic.rule=HostRegexp(`elastic\\..+`)"
      - "co.elastic.logs/module=elasticsearch"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s http://localhost:9200",
        ]
      interval: 3s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      elasticsearch:
        condition: service_healthy
      elk-setup:
        condition: service_completed_successfully
    image: docker.elastic.co/kibana/kibana:8.17.0
    restart: unless-stopped
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
    networks:
      - analytics
    volumes:
      - kibanadata:/usr/share/kibana/data
    labels:
      - "traefik.http.routers.kibana.rule=HostRegexp(`kibana\\..+`)"
      - "co.elastic.logs/module=kibana"
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 3s
      timeout: 10s
      retries: 120

  # logstash:
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy
  #     kibana:
  #       condition: service_healthy
  #     elk-setup:
  #       condition: service_completed_successfully
  #   image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
  #   user: root
  #   networks:
  #     - analytics
  #   volumes:
  #     - logstashdata:/usr/share/logstash/data
  #     - "./logstash_ingest_data/:/usr/share/logstash/ingest_data/"
  #     - "./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
  #   environment:
  #     - xpack.monitoring.enabled=false
  #     - ELASTIC_USER=elastic
  #     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
  #     - ELASTIC_HOSTS=https://elasticsearch:9200
  #   labels:
  #     - "co.elastic.logs/module=logstash"

volumes:
  esdata:
  kibanadata:
  logstashdata:
